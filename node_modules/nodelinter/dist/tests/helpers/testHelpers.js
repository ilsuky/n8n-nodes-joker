"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.separateCheckCredTestFunctions = exports.separateContinueOnFail = exports.lintingsByGroup = exports.exceptionMockFilePath = exports.validatorMockFilePath = exports.runTest = exports.transpile = void 0;
var typescript_1 = __importDefault(require("typescript"));
var fs_1 = __importDefault(require("fs"));
var path_1 = __importDefault(require("path"));
var services_1 = require("../../services");
var lintings_1 = require("../../lintings");
var defaultConfig_1 = require("../../defaultConfig");
var __1 = require("../..");
var ConfigManager_1 = require("../../services/ConfigManager");
var transpile = function (validator, sourceFilePath) {
    var source = fs_1.default.readFileSync(sourceFilePath, "utf8");
    typescript_1.default.transpileModule(source.toString(), {
        transformers: { before: [services_1.Traverser.traverse(validator)] },
    });
};
exports.transpile = transpile;
var runTest = function (validator) { return function (linting) {
    test(linting.message, function () {
        var found = validator.logs.find(function (log) { return log.message === linting.message; });
        if (ConfigManager_1.ConfigManager.lintIssueIsDisabled(linting.lintIssue, defaultConfig_1.defaultConfig))
            return;
        if (ConfigManager_1.ConfigManager.lintingIsDisabled(linting, defaultConfig_1.defaultConfig))
            return;
        expect(found).toBeDefined();
    });
}; };
exports.runTest = runTest;
var validatorMockFilePath = function (fileName) {
    return path_1.default.join("src", "tests", "mocks", "validators", fileName);
};
exports.validatorMockFilePath = validatorMockFilePath;
var exceptionMockFilePath = function (fileName) {
    return path_1.default.join("src", "tests", "mocks", "exceptions", fileName);
};
exports.exceptionMockFilePath = exceptionMockFilePath;
var groupByLintArea = function (list) {
    return list.reduce(function (acc, linting) {
        linting.lintAreas.forEach(function (lintArea) {
            var _a;
            var accLintArea = (_a = acc[lintArea]) !== null && _a !== void 0 ? _a : [];
            accLintArea.push(linting);
            acc[lintArea] = accLintArea;
        });
        return acc;
    }, {});
};
exports.lintingsByGroup = groupByLintArea(Object.values(lintings_1.LINTINGS));
/**
 * Separate one linting from others based on a test.
 *
 * Only _one_ linting is expected to pass.
 */
var partition = function (test) {
    return function (array) {
        var pass = [];
        var fail = [];
        array.forEach(function (item) { return (test(item) ? pass : fail).push(item); });
        return [pass[0], fail];
    };
};
exports.separateContinueOnFail = partition(function (linting) {
    return linting.message === __1.masterConfig.lintings.MISSING_CONTINUE_ON_FAIL.message;
});
exports.separateCheckCredTestFunctions = partition(function (linting) {
    return linting.message === __1.masterConfig.lintings.MISMATCHED_NONOAUTH_CREDENTIALS_TEST_METHOD_REFERENCE.message;
});
