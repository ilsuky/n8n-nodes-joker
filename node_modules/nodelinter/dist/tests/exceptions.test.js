"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var lintings_1 = require("../lintings");
var services_1 = require("../services");
var testHelpers_1 = require("./helpers/testHelpers");
describe("Exceptions should disable lintings", function () {
    it("Single-linting exception for next line", function () {
        // PARAM_DESCRIPTION_UNTRIMMED
        var sourceFilePath = testHelpers_1.exceptionMockFilePath("single.ts");
        var validator = new services_1.Validator(sourceFilePath);
        testHelpers_1.transpile(validator, sourceFilePath);
        var found = validator.logs.find(function (log) { return log.message === lintings_1.LINTINGS.PARAM_DESCRIPTION_UNTRIMMED.message; });
        expect(found).toBeUndefined();
    });
    it("Multiple-lintings exception for next line", function () {
        // PARAM_DESCRIPTION_UNTRIMMED
        // PARAM_DESCRIPTION_WITH_EXCESS_WHITESPACE
        var sourceFilePath = testHelpers_1.exceptionMockFilePath("multiple.ts");
        var validator = new services_1.Validator(sourceFilePath);
        testHelpers_1.transpile(validator, sourceFilePath);
        var foundUntrimmed = validator.logs.find(function (log) { return log.message === lintings_1.LINTINGS.PARAM_DESCRIPTION_UNTRIMMED.message; });
        var foundExcess = validator.logs.find(function (log) {
            return log.message ===
                lintings_1.LINTINGS.PARAM_DESCRIPTION_WITH_EXCESS_WHITESPACE.message;
        });
        expect(foundUntrimmed).toBeUndefined();
        expect(foundExcess).toBeUndefined();
    });
    it("All-lintings exception for next line", function () {
        var sourceFilePath = testHelpers_1.exceptionMockFilePath("all.ts");
        var validator = new services_1.Validator(sourceFilePath);
        testHelpers_1.transpile(validator, sourceFilePath);
        var found = validator.logs.find(function (log) { return log.line === 11; });
        expect(found).toBeUndefined();
    });
});
