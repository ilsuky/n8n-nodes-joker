import chalk from "chalk";
export declare class Presenter {
    config: Config;
    targethasAbsolutePath: boolean;
    logs: Log[];
    log: Log;
    isLastLog: boolean;
    errorBaseColor: chalk.Chalk;
    warningBaseColor: chalk.Chalk;
    infoBaseColor: chalk.Chalk;
    constructor(config: Config);
    showLogs(logs: Log[]): void;
    private showHeader;
    private showMainLine;
    private formatLineNumber;
    private pad;
    private colorLogAndMessage;
    private showDetailsLine;
    private showExcerptLine;
    private showFinalLine;
    summarize(allFilesLogs: Log[], executionTimeMs: number): void;
    showSummary({ total, errors, warnings, infos, executionTimeMs, }: LogSummary): void;
    /**
     * Wrap text into n-chars-long lines, at whitespace chars.
     */
    private wrapLines;
    private getColor;
    private sortLogs;
    /**
     * Separate logs based on whether they pass a test.
     */
    private separate;
    /**
     * Separate an AB group of lintings into those that affect
     * the same line and those that do not.
     *
     * An "AB group of lintings" is an array of lintings that
     * may be of _one of two types only_, i.e. pre-filtered.
     *
     * TODO: Merge with `this.separate()`
     */
    private separatePerSameLine;
    /**
     * Remove logs that are logically covered by other logs on the same line.
     *
     * TODO: Systematize preferences and refactor this logic
     */
    private isReturnAllOrWhether;
    private isReturnAll;
    isWeakOrExcess(log: Log): boolean;
    private isWeak;
    private sortByImportance;
    private sortByLineNumber;
    static printJson(fileName: string, content: object): void;
}
