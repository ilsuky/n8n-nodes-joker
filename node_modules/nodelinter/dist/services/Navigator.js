"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Navigator = void 0;
var typescript_1 = __importDefault(require("typescript"));
/**
 * Bundle of utility methods to navigate the AST.
 */
var Navigator = /** @class */ (function () {
    function Navigator() {
    }
    /**
     * Find a matching descendant node.
     */
    Navigator.findDescendant = function (node, testType) {
        if (node.getChildCount() === 0)
            return;
        return node.forEachChild(function (child) {
            return Navigator.getTest(testType)(child)
                ? child
                : Navigator.findDescendant(child, testType);
        });
    };
    Navigator.isBooleanKeyword = function (node) {
        return (node.kind === typescript_1.default.SyntaxKind.TrueKeyword ||
            node.kind === typescript_1.default.SyntaxKind.FalseKeyword);
    };
    /**
     * Check if the node is a property assignment where
     * - the key-value pair matches, or
     * - the key matches.
     *
     * Note: For the value, `getText()` returns a string from the source, i.e.
     * - a twice-quoted string for a string in the source (e.g. `'value'` → `"'value'"`), and
     * - a normal string for a non-string in the source (e.g. `false` → `'false'`).
     *
     * Therefore, the value to compare to needs to be twice-quoted or stringified.
     */
    Navigator.isAssignment = function (node, _a) {
        var key = _a.key, value = _a.value;
        if (key !== undefined && value !== undefined) {
            var isString = typeof value === "string";
            return (typescript_1.default.isPropertyAssignment(node) &&
                node.getChildAt(0).getText() === key &&
                node.getChildAt(2).getText() ===
                    (isString ? "'" + value + "'" : value.toString()));
        }
        if (key !== undefined && value === undefined) {
            return (typescript_1.default.isPropertyAssignment(node) && node.getChildAt(0).getText() === key);
        }
    };
    Navigator.getTest = function (testType) {
        if (testType.text)
            return function (node) { return node.getText() === testType.text; };
        throw new Error("Unknown test type");
    };
    return Navigator;
}());
exports.Navigator = Navigator;
