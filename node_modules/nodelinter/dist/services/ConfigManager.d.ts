export declare class ConfigManager {
    printLogs: boolean;
    only: LogLevel;
    patterns: LintableFilePattern[];
    extractDescriptions: boolean;
    configPath: string;
    targetPath: string;
    defaultConfig: Config;
    customConfig: Config;
    masterConfig: Config;
    /**
     * `isNotTestRun` is needed so that tests use `defaultConfig` instead of `customConfig`.
     */
    constructor(args: string[]);
    private parseArgs;
    private parseOnlyArgs;
    private parsePrintArgs;
    private parsePatternsArgs;
    overrideLogLevels(): void;
    /**
     * Adjust lintable file patterns to tolerate mistypings.
     */
    private adjustPattern;
    private areValidPatterns;
    private loadCustomConfig;
    private autoDetectConfigPath;
    /**
     * Validate that the CLI options or the keys in custom config
     * are only those found in the default config.
     *
     * // TODO: Refactor this method
     */
    private validateNoUnknowns;
    private validateTargetKeyExists;
    /**
     * Validate that a single target exists, either
     * - the `--target` CLI arg, i.e. `this.targetPath` or
     * - the `target` key in the custom config, i.e. `this.customConfig.target`.
     */
    private validateNoTargetKeyConflict;
    private deepMerge;
    static lintAreaIsDisabled(lintArea: LintArea, config: Config): boolean;
    static lintIssueIsDisabled(lintIssue: LintIssue, config: Config): boolean;
    static logLevelIsDisabled(logLevel: LogLevel, config: Config): boolean;
    static lintingIsDisabled(linting: Linting, config: Config): boolean;
    /**
     * Report whether a linting at a line is disabled by an exception comment.
     */
    static lintingIsExcepted(linting: Linting, lintingLine: number, exceptions: Exception[], masterConfig: Config): boolean;
}
