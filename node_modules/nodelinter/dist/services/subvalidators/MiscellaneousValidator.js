"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.MiscellaneousValidator = void 0;
var typescript_1 = __importDefault(require("typescript"));
var lintings_1 = require("../../lintings");
var constants_1 = require("../../constants");
var Navigator_1 = require("../Navigator");
var Collector_1 = require("../Collector");
var MiscellaneousValidator = /** @class */ (function () {
    function MiscellaneousValidator() {
    }
    MiscellaneousValidator.prototype.run = function (node) {
        var _this = this;
        if (Navigator_1.Navigator.isAssignment(node, { key: 'displayName' })) {
            var value = node.getChildAt(2).getText().clean();
            if (value.toLowerCase().match(/colo(u?)r/)) {
                var hasColorTypeParam_1 = false;
                node.parent.forEachChild(function (propertyAssignment) {
                    if (Navigator_1.Navigator.isAssignment(propertyAssignment, { key: 'type', value: 'color' })) {
                        hasColorTypeParam_1 = true;
                    }
                });
                if (!hasColorTypeParam_1) {
                    this.log(lintings_1.LINTINGS.COLOR_TYPE_NOT_USED_FOR_COLOR_PARAM)(node);
                }
            }
        }
        if (typescript_1.default.isAsExpression(node) &&
            node.getChildAt(2).getText() === "INodeProperties[]") {
            this.log(lintings_1.LINTINGS.I_NODE_PROPERTIES_MISCASTING)(node);
        }
        if (Navigator_1.Navigator.isAssignment(node, { key: "name", value: "resource" })) {
            var resourceHasNoDataExpression_1 = false;
            node.parent.forEachChild(function (node) {
                if (node.getChildAt(0).getText() === "noDataExpression" &&
                    node.getChildAt(2).getText() === "true") {
                    resourceHasNoDataExpression_1 = true;
                }
            });
            if (!resourceHasNoDataExpression_1) {
                this.log(lintings_1.LINTINGS.RESOURCE_WITHOUT_NO_DATA_EXPRESSION)(node);
            }
        }
        if (Navigator_1.Navigator.isAssignment(node, { key: "name", value: "operation" })) {
            var operationHasNoDataExpression_1 = false;
            node.parent.forEachChild(function (node) {
                if (node.getChildAt(0).getText() === "noDataExpression" &&
                    node.getChildAt(2).getText() === "true") {
                    operationHasNoDataExpression_1 = true;
                }
            });
            if (!operationHasNoDataExpression_1) {
                this.log(lintings_1.LINTINGS.OPERATION_WITHOUT_NO_DATA_EXPRESSION)(node);
            }
        }
        if (Navigator_1.Navigator.isAssignment(node, { key: "name", value: "returnAll" })) {
            node.parent.forEachChild(function (node) {
                if (node.getChildAt(0).getText() === "description" &&
                    node.getChildAt(2).getText() !==
                        "'" + constants_1.STANDARD_DESCRIPTIONS.returnAll + "'")
                    _this.log(lintings_1.LINTINGS.NON_STANDARD_RETURNALL_DESCRIPTION)(node);
            });
        }
        if (typescript_1.default.isAsExpression(node) &&
            typescript_1.default.isArrayLiteralExpression(node.getChildAt(0))) {
            node.getChildAt(0).forEachChild(function (node) {
                return node.forEachChild(function (node) {
                    if (Navigator_1.Navigator.isAssignment(node, { key: "required", value: false })) {
                        _this.log(lintings_1.LINTINGS.REQUIRED_FALSE)(node);
                    }
                });
            });
        }
        if (typescript_1.default.isIdentifier(node) &&
            !typescript_1.default.isTypeReferenceNode(node.parent) &&
            node.getText() === "Error") {
            this.log(lintings_1.LINTINGS.WRONG_ERROR_THROWN)(node.parent);
        }
        if (typescript_1.default.isIdentifier(node) && node.getText() === "loadOptionsMethod") {
            var loadOptionsMethod = node.parent
                .getText()
                .split(":")
                .map(function (i) { return i.trim().replace(/'/g, ""); })
                .pop();
            if (loadOptionsMethod &&
                !Collector_1.Collector.loadOptionsMethods.includes(loadOptionsMethod)) {
                this.log(lintings_1.LINTINGS.NON_EXISTENT_LOAD_OPTIONS_METHOD)(node.parent);
            }
        }
        return this.logs;
    };
    MiscellaneousValidator.lintArea = "miscellaneous";
    return MiscellaneousValidator;
}());
exports.MiscellaneousValidator = MiscellaneousValidator;
