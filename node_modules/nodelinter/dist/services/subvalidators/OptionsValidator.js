"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.OptionsValidator = void 0;
var typescript_1 = __importDefault(require("typescript"));
var utils_1 = require("../../utils");
var lintings_1 = require("../../lintings");
var constants_1 = require("../../constants");
var Navigator_1 = require("../Navigator");
var OptionsValidator = /** @class */ (function () {
    function OptionsValidator() {
    }
    OptionsValidator.prototype.run = function (node) {
        var _this = this;
        if (Navigator_1.Navigator.isAssignment(node, { key: "type", value: "fixedCollection" })) {
            var fixedCollectionValuesNames_1 = [];
            var nodeToReport_1 = node;
            node.parent.forEachChild(function (child) {
                if (child.getChildAt(0).getText() === "options") {
                    child
                        .getChildAt(2)
                        .getChildAt(1)
                        .getChildAt(0)
                        .forEachChild(function (child) {
                        if (child.getChildAt(0).getText() === "values") {
                            nodeToReport_1 = child.getChildAt(2);
                            child.getChildAt(2).forEachChild(function (child) {
                                if (typescript_1.default.isObjectLiteralExpression(child)) {
                                    child.forEachChild(function (child) {
                                        if (child.getChildAt(0).getText() === "displayName") {
                                            if (!utils_1.isTitleCase(child.getChildAt(2).getText().replace(/'/g, ""))) {
                                                _this.log(lintings_1.LINTINGS.FIXED_COLLECTION_VALUE_DISPLAY_NAME_WITH_NO_TITLECASE)(child);
                                            }
                                        }
                                        if (child.getChildAt(0).getText() === "displayName") {
                                            fixedCollectionValuesNames_1.push(child.getChildAt(2).getText().replace(/'/g, "") // remove single quotes from string
                                            );
                                        }
                                    });
                                }
                            });
                        }
                    });
                }
            });
            if (utils_1.areLongListing(fixedCollectionValuesNames_1) &&
                !utils_1.areAlphabetized(fixedCollectionValuesNames_1)) {
                this.log(lintings_1.LINTINGS.NON_ALPHABETIZED_VALUES_IN_FIXED_COLLECTION_TYPE_PARAM)(nodeToReport_1);
            }
        }
        if (Navigator_1.Navigator.isAssignment(node, { key: "type", value: "collection" })) {
            var nodeToReport_2 = node;
            var collectionOptionsNames_1 = [];
            node.parent.forEachChild(function (node) {
                if (node.getChildAt(0).getText() !== "options")
                    return;
                if (!typescript_1.default.isArrayLiteralExpression(node.getChildAt(2)))
                    return;
                nodeToReport_2 = node;
                node.getChildAt(2).forEachChild(function (node) {
                    if (!typescript_1.default.isObjectLiteralExpression(node))
                        return;
                    node.forEachChild(function (node) {
                        if (typescript_1.default.isPropertyAssignment(node) &&
                            node.getChildAt(0).getText() === "name") {
                            collectionOptionsNames_1.push(node.getChildAt(2).getText().replace(/'/g, "") // remove single quotes from string
                            );
                        }
                    });
                });
            });
            if (utils_1.areLongListing(collectionOptionsNames_1) &&
                !utils_1.areAlphabetized(collectionOptionsNames_1)) {
                this.log(lintings_1.LINTINGS.NON_ALPHABETIZED_OPTIONS_IN_COLLECTION_TYPE_PARAM)(nodeToReport_2);
            }
        }
        if (typescript_1.default.isPropertyAssignment(node) &&
            node.getChildAt(0).getText() === "type" &&
            (node.getChildAt(2).getText() === "'options'" ||
                node.getChildAt(2).getText() === "'multiOptions'")) {
            var isOptionsType = node.getChildAt(2).getText() === "'options'";
            var isMultiOptionsType = node.getChildAt(2).getText() === "'multiOptions'";
            var nodeToReport_3 = node;
            var optionsNames_1 = [];
            node.parent.forEachChild(function (node) {
                if (node.getChildAt(0).getText() !== "options")
                    return;
                if (!typescript_1.default.isArrayLiteralExpression(node.getChildAt(2)))
                    return;
                nodeToReport_3 = node;
                node.getChildAt(2).forEachChild(function (node) {
                    if (!typescript_1.default.isObjectLiteralExpression(node))
                        return;
                    node.forEachChild(function (node) {
                        if (Navigator_1.Navigator.isAssignment(node, { key: "name" })) {
                            optionsNames_1.push(node.getChildAt(2).getText().replace(/'/g, "") // remove single quotes from string
                            );
                            if (!utils_1.isTitleCase(node.getChildAt(2).getText().replace(/'/g, ""))) {
                                _this.log(lintings_1.LINTINGS.OPTIONS_NAME_WITH_NO_TITLECASE)(node);
                            }
                        }
                        if (Navigator_1.Navigator.isAssignment(node, { key: "value" })) {
                            if (!utils_1.isCamelCase(node.getChildAt(2).getText().replace(/'/g, ""))) {
                                _this.log(lintings_1.LINTINGS.OPTIONS_VALUE_WITH_NO_CAMELCASE)(node);
                            }
                            if (node.getChildAt(2).getText() === "'upsert'") {
                                node.parent.forEachChild(function (child) {
                                    if (child.getChildAt(0).getText() === "name") {
                                        if (child.getChildAt(2).getText() !==
                                            "'" + constants_1.STANDARD_DESCRIPTIONS.upsert + "'") {
                                            _this.log(lintings_1.LINTINGS.NON_STANDARD_NAME_FOR_UPSERT_OPTION)(child);
                                        }
                                    }
                                    if (child.getChildAt(0).getText() === "description") {
                                        if (child.getChildAt(2).getText() !==
                                            "'" + constants_1.STANDARD_DESCRIPTIONS.upsert + "'") {
                                            _this.log(lintings_1.LINTINGS.NON_STANDARD_DESCRIPTION_FOR_UPSERT_OPTION)(child);
                                        }
                                    }
                                });
                            }
                        }
                    });
                });
            });
            if (isOptionsType &&
                utils_1.areLongListing(optionsNames_1) &&
                !utils_1.areAlphabetized(optionsNames_1)) {
                this.log(lintings_1.LINTINGS.NON_ALPHABETIZED_OPTIONS_IN_OPTIONS_TYPE_PARAM)(nodeToReport_3);
            }
            if (isMultiOptionsType &&
                utils_1.areLongListing(optionsNames_1) &&
                !utils_1.areAlphabetized(optionsNames_1)) {
                this.log(lintings_1.LINTINGS.NON_ALPHABETIZED_OPTIONS_IN_MULTIOPTIONS_TYPE_PARAM)(nodeToReport_3);
            }
        }
        return this.logs;
    };
    OptionsValidator.lintArea = "options";
    return OptionsValidator;
}());
exports.OptionsValidator = OptionsValidator;
