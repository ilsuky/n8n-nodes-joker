"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.NameValidator = void 0;
var utils_1 = require("../../utils");
var lintings_1 = require("../../lintings");
var Navigator_1 = require("../Navigator");
var NameValidator = /** @class */ (function () {
    function NameValidator() {
    }
    NameValidator.prototype.run = function (node) {
        var _a, _b, _c, _d, _e;
        if (Navigator_1.Navigator.isAssignment(node, { key: "name", value: "*" })) {
            this.log(lintings_1.LINTINGS.NAME_USING_STAR_INSTEAD_OF_ALL)(node);
        }
        if (Navigator_1.Navigator.isAssignment(node, { key: "name" })) {
            var hasDefaultsParent = (_b = (_a = node === null || node === void 0 ? void 0 : node.parent) === null || _a === void 0 ? void 0 : _a.parent) === null || _b === void 0 ? void 0 : _b.getText().startsWith("defaults"); // skip check for defaults
            if (hasDefaultsParent)
                return;
            var hasCredentialsParent = (_e = (_d = (_c = node === null || node === void 0 ? void 0 : node.parent) === null || _c === void 0 ? void 0 : _c.parent) === null || _d === void 0 ? void 0 : _d.parent) === null || _e === void 0 ? void 0 : _e.getText().startsWith("credentials");
            var nameValue = node.getChildAt(2).getText().replace(/'/g, ""); // remove single quotes
            if (hasCredentialsParent) {
                if (!nameValue.endsWith("Api")) {
                    this.log(lintings_1.LINTINGS.NON_SUFFIXED_CREDENTIALS_NAME)(node);
                }
            }
            if (nameValue === "authentication") {
                this.log(lintings_1.LINTINGS.AUTHENTICATION_PARAM_NOT_IN_CREDENTIALS)(node);
            }
            var isOption_1 = false;
            node.parent.forEachChild(function (node) {
                if (Navigator_1.Navigator.isAssignment(node, { key: "value" })) {
                    isOption_1 = true;
                }
            });
            if (!isOption_1) {
                if ((nameValue.length > 2 &&
                    !nameValue.includes("_") &&
                    nameValue.match(/id$/)) ||
                    nameValue.match(/ID$/)) {
                    this.log(lintings_1.LINTINGS.NAME_WITH_MISCASED_ID)(node);
                }
                if (!utils_1.isCamelCase(nameValue)) {
                    this.log(lintings_1.LINTINGS.NAME_WITH_NO_CAMELCASE)(node);
                }
            }
        }
        return this.logs;
    };
    NameValidator.lintArea = "name";
    return NameValidator;
}());
exports.NameValidator = NameValidator;
