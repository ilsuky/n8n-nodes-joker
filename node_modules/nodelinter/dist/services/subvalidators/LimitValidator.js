"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.LimitValidator = void 0;
var typescript_1 = __importDefault(require("typescript"));
var constants_1 = require("../../constants");
var lintings_1 = require("../../lintings");
var Navigator_1 = require("../Navigator");
var LimitValidator = /** @class */ (function () {
    function LimitValidator() {
    }
    LimitValidator.prototype.run = function (node) {
        var _this = this;
        if (Navigator_1.Navigator.isAssignment(node, { key: "name" })) {
            var nameValue = node.getChildAt(2).getText().replace(/'/g, ""); // remove single quotes
            if (nameValue === "limit") {
                var hasTypeOptions_1 = false;
                node.parent.forEachChild(function (node) {
                    if (typescript_1.default.isPropertyAssignment(node) &&
                        node.getChildAt(0).getText() === "default" &&
                        node.getChildAt(2).getText() !== "50") {
                        _this.log(lintings_1.LINTINGS.WRONG_DEFAULT_FOR_LIMIT_PARAM)(node);
                    }
                    if (typescript_1.default.isPropertyAssignment(node) &&
                        node.getChildAt(0).getText() === "description" &&
                        node.getChildAt(2).getText() !== "'" + constants_1.STANDARD_DESCRIPTIONS.limit + "'") {
                        _this.log(lintings_1.LINTINGS.NON_STANDARD_LIMIT_DESCRIPTION)(node);
                    }
                    if (Navigator_1.Navigator.isAssignment(node, { key: "typeOptions" })) {
                        node.getChildAt(2).forEachChild(function (node) {
                            if (node.getChildAt(0).getText() === "minValue") {
                                hasTypeOptions_1 = true;
                                var minValue = node.getChildAt(2).getText();
                                if (Number(minValue) < 1) {
                                    _this.log(lintings_1.LINTINGS.LIMIT_WITH_MIN_VALUE_LOWER_THAN_ONE)(node);
                                }
                            }
                        });
                    }
                });
                if (!hasTypeOptions_1) {
                    this.log(lintings_1.LINTINGS.LIMIT_WITHOUT_TYPE_OPTIONS)(node);
                }
            }
        }
        return this.logs;
    };
    LimitValidator.lintArea = "limit";
    return LimitValidator;
}());
exports.LimitValidator = LimitValidator;
