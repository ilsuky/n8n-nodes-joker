"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.DefaultValidator = void 0;
var typescript_1 = __importDefault(require("typescript"));
var lintings_1 = require("../../lintings");
var Navigator_1 = require("../Navigator");
var DefaultValidator = /** @class */ (function () {
    function DefaultValidator() {
        var _this = this;
        /**
         * Generate a function that validates if the value for a `default` conforms to the param `type`.
         *
         * Not applicable for default values that must conform to `displayName`, e.g. `default: true` for
         * `displayName: 'Simplify Response'`.
         */
        this.defaultValidatorGenerator = function (typeName, typeCheck, linting) {
            return function (node) {
                if (Navigator_1.Navigator.isAssignment(node, { key: "type", value: typeName })) {
                    node.parent.forEachChild(function (node) {
                        if (node.getChildAt(0).getText() === "default" &&
                            !typeCheck(node.getChildAt(2)))
                            _this.log(linting)(node);
                    });
                }
            };
        };
        this.validateStringDefault = this.defaultValidatorGenerator("string", typescript_1.default.isStringLiteral, lintings_1.LINTINGS.WRONG_DEFAULT_FOR_STRING_TYPE_PARAM);
        this.validateNumberDefault = this.defaultValidatorGenerator("number", typescript_1.default.isNumericLiteral, lintings_1.LINTINGS.WRONG_DEFAULT_FOR_NUMBER_TYPE_PARAM);
        this.validateBooleanDefault = this.defaultValidatorGenerator("boolean", Navigator_1.Navigator.isBooleanKeyword, lintings_1.LINTINGS.WRONG_DEFAULT_FOR_BOOLEAN_TYPE_PARAM);
        this.validateCollectionDefault = this.defaultValidatorGenerator("collection", typescript_1.default.isObjectLiteralExpression, lintings_1.LINTINGS.WRONG_DEFAULT_FOR_COLLECTION_TYPE_PARAM);
        this.validateMultiOptionsDefault = this.defaultValidatorGenerator("multiOptions", typescript_1.default.isArrayLiteralExpression, lintings_1.LINTINGS.WRONG_DEFAULT_FOR_MULTIOPTIONS_TYPE_PARAM);
        this.validateOptionsDefault = function (node) {
            var _a;
            if (Navigator_1.Navigator.isAssignment(node, { key: "type", value: "options" })) {
                var hasTypeOptionsSibling_1 = false;
                (_a = node === null || node === void 0 ? void 0 : node.parent) === null || _a === void 0 ? void 0 : _a.forEachChild(function (child) {
                    if (Navigator_1.Navigator.isAssignment(child, { key: "typeOptions" })) {
                        hasTypeOptionsSibling_1 = true;
                    }
                });
                if (hasTypeOptionsSibling_1)
                    return;
                var defaultNodeToReport_1 = node; // if the includes check fails
                var defaultOptionValue_1 = "";
                var optionValues_1 = [];
                node.parent.forEachChild(function (node) {
                    if (Navigator_1.Navigator.isAssignment(node, { key: "default" })) {
                        defaultOptionValue_1 = node.getChildAt(2).getText().replace(/'/g, ""); // remove single quotes
                        defaultNodeToReport_1 = node;
                    }
                });
                var hasOptionsInVariable_1 = false;
                node.parent.forEachChild(function (node) {
                    if (node.getChildAt(0).getText() !== "options")
                        return;
                    // value of options is variable instead of array literal
                    if (typescript_1.default.isIdentifier(node.getChildAt(2))) {
                        hasOptionsInVariable_1 = true;
                    }
                    if (!typescript_1.default.isArrayLiteralExpression(node.getChildAt(2)))
                        return;
                    node.getChildAt(2).forEachChild(function (node) {
                        if (!typescript_1.default.isObjectLiteralExpression(node))
                            return;
                        node.forEachChild(function (node) {
                            if (Navigator_1.Navigator.isAssignment(node, { key: "value" })) {
                                optionValues_1.push(node.getChildAt(2).getText().replace(/'/g, "") // remove single quotes
                                );
                            }
                        });
                    });
                });
                if (!optionValues_1.includes(defaultOptionValue_1) && !hasOptionsInVariable_1) {
                    _this.log(lintings_1.LINTINGS.WRONG_DEFAULT_FOR_OPTIONS_TYPE_PARAM)(defaultNodeToReport_1);
                }
            }
        };
    }
    DefaultValidator.prototype.run = function (node) {
        this.validateDefaultExists(node);
        this.validateStringDefault(node);
        this.validateNumberDefault(node);
        this.validateBooleanDefault(node);
        this.validateCollectionDefault(node);
        this.validateMultiOptionsDefault(node);
        this.validateOptionsDefault(node);
        this.validateSimplifyDefault(node);
        return this.logs;
    };
    DefaultValidator.prototype.validateDefaultExists = function (node) {
        if (Navigator_1.Navigator.isAssignment(node, { key: "type" })) {
            var hasDefault_1 = false;
            node.parent.forEachChild(function (node) {
                if (Navigator_1.Navigator.isAssignment(node, { key: "default" })) {
                    hasDefault_1 = true;
                }
            });
            if (!hasDefault_1) {
                this.log(lintings_1.LINTINGS.DEFAULT_MISSING)(node);
            }
        }
    };
    DefaultValidator.prototype.validateSimplifyDefault = function (node) {
        var _this = this;
        if (Navigator_1.Navigator.isAssignment(node, {
            key: "displayName",
            value: "Simplify Response",
        })) {
            node.parent.forEachChild(function (child) {
                if (Navigator_1.Navigator.isAssignment(child, { key: "default", value: false })) {
                    _this.log(lintings_1.LINTINGS.WRONG_DEFAULT_FOR_SIMPLIFY_PARAM)(child);
                }
            });
        }
    };
    DefaultValidator.lintArea = "default";
    return DefaultValidator;
}());
exports.DefaultValidator = DefaultValidator;
