"use strict";
var __read = (this && this.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};
var __spreadArray = (this && this.__spreadArray) || function (to, from) {
    for (var i = 0, il = from.length, j = to.length; i < il; i++, j++)
        to[j] = from[i];
    return to;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.DescriptionValidator = void 0;
var typescript_1 = __importDefault(require("typescript"));
var constants_1 = require("../../constants");
var lintings_1 = require("../../lintings");
var utils_1 = require("../../utils");
// TODO: Refactor for readability
var DescriptionValidator = /** @class */ (function () {
    function DescriptionValidator() {
    }
    /**
     * Validate that a single-sentence description has no final period, and
     * that a multiple-sentence description has final periods for all sentences,
     * except if the sentence ends with a `</code>` element.
     */
    DescriptionValidator.prototype.checkFinalPeriod = function (description, node) {
        var sentences = description.split(". ");
        if (!sentences.length)
            return;
        if (sentences.length === 1 && !sentences[0].endsWith("."))
            return;
        if (sentences.length === 1 && sentences[0].endsWith(".")) {
            this.log(lintings_1.LINTINGS.PARAM_DESCRIPTION_WITH_EXCESS_FINAL_PERIOD)(node);
            return;
        }
        var _a = __read(__spreadArray([sentences.pop()], __read(sentences))), last = _a[0], allButLast = _a.slice(1);
        // restore periods removed by split() in all but last
        var restored = __spreadArray(__spreadArray([], __read(allButLast.map(function (s) { return (s += "."); }))), [last]);
        var lastSentence = restored[restored.length - 1];
        if (lastSentence.endsWith("</code>"))
            return;
        if (lastSentence.endsWith("</code>.")) {
            this.log(lintings_1.LINTINGS.PARAM_DESCRIPTION_WITH_EXCESS_FINAL_PERIOD)(node);
            return;
        }
        if (!restored.every(function (sentence) { return sentence.endsWith("."); })) {
            this.log(lintings_1.LINTINGS.PARAM_DESCRIPTION_WITH_MISSING_FINAL_PERIOD)(node);
        }
    };
    DescriptionValidator.prototype.run = function (node) {
        var _this = this;
        var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o;
        // skip object inside arrow function that happens to have `name` property
        var isNameInArrowFunction = typescript_1.default.isPropertyAssignment(node) &&
            typescript_1.default.isIdentifier(node.getChildAt(0)) &&
            node.getChildAt(0).getText() === "name" &&
            ((_c = (_b = (_a = node === null || node === void 0 ? void 0 : node.parent) === null || _a === void 0 ? void 0 : _a.parent) === null || _b === void 0 ? void 0 : _b.parent) === null || _c === void 0 ? void 0 : _c.kind) === typescript_1.default.SyntaxKind.ArrowFunction;
        // skip object inside `execute()` that happens to have `name` property
        var isNameWithVariableDeclarationParent = typescript_1.default.isPropertyAssignment(node) &&
            typescript_1.default.isIdentifier(node.getChildAt(0)) &&
            node.getChildAt(0).getText() === "name" &&
            (((_e = (_d = node === null || node === void 0 ? void 0 : node.parent) === null || _d === void 0 ? void 0 : _d.parent) === null || _e === void 0 ? void 0 : _e.kind) === typescript_1.default.SyntaxKind.VariableDeclaration ||
                ((_h = (_g = (_f = node === null || node === void 0 ? void 0 : node.parent) === null || _f === void 0 ? void 0 : _f.parent) === null || _g === void 0 ? void 0 : _g.parent) === null || _h === void 0 ? void 0 : _h.kind) ===
                    typescript_1.default.SyntaxKind.VariableDeclaration);
        // skip object in `credentials` in node description
        var hasCredentialsParent = (_l = (_k = (_j = node === null || node === void 0 ? void 0 : node.parent) === null || _j === void 0 ? void 0 : _j.parent) === null || _k === void 0 ? void 0 : _k.parent) === null || _l === void 0 ? void 0 : _l.getText().startsWith("credentials");
        // skip object in `defaults` in node description
        var hasDefaultsParent = (_o = (_m = node === null || node === void 0 ? void 0 : node.parent) === null || _m === void 0 ? void 0 : _m.parent) === null || _o === void 0 ? void 0 : _o.getText().startsWith("defaults");
        if (!typescript_1.default.isPropertyAssignment(node))
            return;
        if (node.getChildAt(0).getText() === "name" &&
            node.getChildAt(2).getText() === "'simple'") {
            node.parent.forEachChild(function (node) {
                if (node.getChildAt(0).getText() === "description" &&
                    node.getChildAt(2).getText() !==
                        "'" + constants_1.STANDARD_DESCRIPTIONS.simplifyResponse + "'")
                    _this.log(lintings_1.LINTINGS.NON_STANDARD_DESCRIPTION_FOR_SIMPLIFY_PARAM)(node);
            });
        }
        if (node.getChildAt(0).getText() === "description") {
            node.parent.forEachChild(function (child) {
                if (child.getChildAt(0).getText() === "displayName") {
                    if (node.getChildAt(2).getText() === child.getChildAt(2).getText()) {
                        _this.log(lintings_1.LINTINGS.PARAM_DESCRIPTION_IDENTICAL_TO_DISPLAY_NAME)(node);
                    }
                }
            });
            if (utils_1.hasAnchorLink(node.getChildAt(2).getText()) &&
                !utils_1.hasProtocol(node.getChildAt(2).getText())) {
                this.log(lintings_1.LINTINGS.PARAM_DESCRIPTION_WITH_MISSING_PROTOCOL_LINK)(node);
            }
            if (node.getChildAt(2).getText().includes("<br />")) {
                this.log(lintings_1.LINTINGS.NON_STANDARD_HTML_LINE_BREAK)(node);
            }
            constants_1.TECHNICAL_TERMS.forEach(function (technicalTerm) {
                if (node.getChildAt(2).getText().includes(technicalTerm)) {
                    _this.log(lintings_1.LINTINGS.TECHNICAL_TERM_IN_PARAM_DESCRIPTION)(node);
                }
            });
            var descriptionText_1 = node.getChildAt(2).getText().replace(/'/g, "");
            constants_1.BRITISH_ENGLISH_SUFFIXES.forEach(function (suffix) {
                descriptionText_1.split(" ").forEach(function (word) {
                    if (word.endsWith(suffix) && word !== "your") {
                        _this.log(lintings_1.LINTINGS.PARAM_DESCRIPTION_WITH_BRITISH_SUFFIX)(node);
                    }
                });
            });
            constants_1.WEAK_DESCRIPTIONS.forEach(function (weakDescription) {
                if (node.getChildAt(2).getText().includes(weakDescription)) {
                    _this.log(lintings_1.LINTINGS.WEAK_PARAM_DESCRIPTION)(node);
                }
            });
            if (node.getChildAt(2).getText().startsWith("' ") ||
                node.getChildAt(2).getText().endsWith(" '")) {
                this.log(lintings_1.LINTINGS.PARAM_DESCRIPTION_UNTRIMMED)(node);
            }
            if (node.getChildAt(2).getText().split(" ").includes("id") ||
                node.getChildAt(2).getText().split(" ").includes("Id")) {
                this.log(lintings_1.LINTINGS.PARAM_DESCRIPTION_WITH_MISCASED_ID)(node);
            }
            if (typescript_1.default.isNoSubstitutionTemplateLiteral(node.getChildAt(2)) &&
                !node.getChildAt(2).getText().includes("'") &&
                !node.getChildAt(2).getText().includes('"')) {
                this.log(lintings_1.LINTINGS.PARAM_DESCRIPTION_WITH_UNNEEDED_BACKTICKS)(node);
            }
            var descriptionValue = node.getChildAt(2).getText().replace(/'/g, ""); // remove single quotes
            if (descriptionValue === "") {
                this.log(lintings_1.LINTINGS.PARAM_DESCRIPTION_AS_EMPTY_STRING)(node);
            }
            if (descriptionValue && !utils_1.startsWithCapital(descriptionValue)) {
                this.log(lintings_1.LINTINGS.PARAM_DESCRIPTION_WITH_UNCAPITALIZED_INITIAL)(node);
            }
            if (/\s{2,}/.test(descriptionValue)) {
                this.log(lintings_1.LINTINGS.PARAM_DESCRIPTION_WITH_EXCESS_WHITESPACE)(node);
            }
            this.checkFinalPeriod(descriptionValue, node);
        }
        if (node.getChildAt(0).getText() === "name" &&
            node.getChildAt(2).getText() !== "'additionalFields'") {
            var hasDescription_1 = false;
            var hasResourceParent_1 = false; // skip check for resource options
            var isBooleanType_1 = false;
            node.parent.forEachChild(function (node) {
                if (node.getText() === "type: 'boolean'") {
                    isBooleanType_1 = true;
                }
                node.parent.parent.parent.parent.forEachChild(function (child) {
                    if (child.getText() === "name: 'resource'") {
                        hasResourceParent_1 = true;
                    }
                });
                if (typescript_1.default.isPropertyAssignment(node) &&
                    node.getChildAt(0).getText() === "description") {
                    hasDescription_1 = true;
                    if (isBooleanType_1 &&
                        !node.getChildAt(2).getText().startsWith("'Whether")) {
                        _this.log(lintings_1.LINTINGS.BOOLEAN_DESCRIPTION_NOT_STARTING_WITH_WHETHER)(node);
                    }
                }
            });
            if (!hasDescription_1 &&
                (hasResourceParent_1 || hasCredentialsParent || hasDefaultsParent)) {
                this.log(lintings_1.LINTINGS.PARAM_DESCRIPTION_MISSING_WHERE_OPTIONAL)(node);
            }
            if (!hasDescription_1 &&
                !hasResourceParent_1 &&
                !hasCredentialsParent &&
                !hasDefaultsParent &&
                !isNameInArrowFunction &&
                !isNameWithVariableDeclarationParent) {
                var isFixedCollection_1 = false;
                node.parent.parent.parent.parent.forEachChild(function (child) {
                    var _a, _b;
                    // skip required param description for middle container of fixed collection
                    if (((_a = child === null || child === void 0 ? void 0 : child.getChildAt(0)) === null || _a === void 0 ? void 0 : _a.getText()) === "type" &&
                        ((_b = child === null || child === void 0 ? void 0 : child.getChildAt(2)) === null || _b === void 0 ? void 0 : _b.getText()) === "'fixedCollection'") {
                        isFixedCollection_1 = true;
                    }
                });
                !isFixedCollection_1 &&
                    this.log(lintings_1.LINTINGS.PARAM_DESCRIPTION_MISSING_WHERE_REQUIRED)(node);
            }
        }
        return this.logs;
    };
    DescriptionValidator.lintArea = "paramDescription";
    return DescriptionValidator;
}());
exports.DescriptionValidator = DescriptionValidator;
