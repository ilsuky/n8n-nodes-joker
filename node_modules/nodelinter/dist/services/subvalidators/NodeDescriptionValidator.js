"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.NodeDescriptionValidator = void 0;
var typescript_1 = __importDefault(require("typescript"));
var lintings_1 = require("../../lintings");
var constants_1 = require("../../constants");
var Navigator_1 = require("../Navigator");
var Collector_1 = require("../Collector");
var NodeDescriptionValidator = /** @class */ (function () {
    function NodeDescriptionValidator() {
    }
    NodeDescriptionValidator.prototype.run = function (node) {
        var _this = this;
        if (typescript_1.default.isPropertyAssignment(node) &&
            (node.getChildAt(0).getText() === "displayName" ||
                node.getChildAt(0).getText() === "name")) {
            // TODO: Clean this up
            node.parent.parent.parent.parent.forEachChild(function (child) {
                if (typescript_1.default.isClassDeclaration(child) &&
                    child.getChildAt(2).getText().endsWith("Trigger") && // class name is "*Trigger"
                    !node.getChildAt(2).getText().endsWith(" Trigger'") &&
                    node.getChildAt(0).getText() === "displayName" // display name is not "* Trigger"
                ) {
                    _this.log(lintings_1.LINTINGS.DISPLAYNAME_NOT_ENDING_WITH_TRIGGER_IN_NODE_DESCRIPTION)(node);
                }
                if (typescript_1.default.isClassDeclaration(child) &&
                    child.getChildAt(2).getText().endsWith("Trigger") && // class name is "*Trigger"
                    !node.getChildAt(2).getText().endsWith("Trigger'") &&
                    node.getChildAt(0).getText() === "name" // name is not "*Trigger"
                ) {
                    _this.log(lintings_1.LINTINGS.NAME_NOT_ENDING_WITH_TRIGGER_IN_NODE_DESCRIPTION)(node);
                }
            });
        }
        if (Navigator_1.Navigator.isAssignment(node, { key: "icon" })) {
            var iconValue = node.getChildAt(2).getText();
            if (iconValue.endsWith(".png'")) {
                this.log(lintings_1.LINTINGS.PNG_ICON_IN_NODE_DESCRIPTION)(node);
            }
        }
        if (Navigator_1.Navigator.isAssignment(node, { key: "inputs" })) {
            var inputsContents = node.getChildAt(2).getChildAt(1).getText();
            var numberOfInputs = inputsContents === "" ? 0 : inputsContents.split(",").length;
            if (Collector_1.Collector.isRegularNode && numberOfInputs === 0) {
                this.log(lintings_1.LINTINGS.WRONG_NUMBER_OF_INPUTS_IN_REGULAR_NODE_DESCRIPTION)(node);
            }
            else if (Collector_1.Collector.isTriggerNode && numberOfInputs !== 0) {
                this.log(lintings_1.LINTINGS.WRONG_NUMBER_OF_INPUTS_IN_TRIGGER_NODE_DESCRIPTION)(node);
            }
        }
        if (Navigator_1.Navigator.isAssignment(node, { key: "outputs" })) {
            var outputsContents = node.getChildAt(2).getChildAt(1).getText();
            var numberOfOutputs = outputsContents === "" ? 0 : outputsContents.split(",").length;
            if (Collector_1.Collector.isRegularNode && numberOfOutputs === 0) {
                this.log(lintings_1.LINTINGS.WRONG_NUMBER_OF_OUTPUTS_IN_NODE_DESCRIPTION)(node);
            }
        }
        if (Navigator_1.Navigator.isAssignment(node, { key: "credentials" })) {
            var arrayLiteralExpression = node.getChildAt(2);
            arrayLiteralExpression.forEachChild(function (credentialsObject) {
                var isNonOAuth = false;
                var hasTestedBy = false;
                credentialsObject.forEachChild(function (propertyAssignment) {
                    var key = propertyAssignment.getChildAt(0).getText();
                    var value = propertyAssignment.getChildAt(2).getText().clean();
                    if (key === "name" && value.endsWith("Api") && !value.endsWith("OAuth2Api")) {
                        isNonOAuth = true;
                    }
                    else if (key === 'testedBy') {
                        hasTestedBy = true;
                    }
                });
                if (isNonOAuth && !hasTestedBy) {
                    _this.log(lintings_1.LINTINGS.MISSING_NONOAUTH_CREDENTIALS_TEST_METHOD_REFERENCE)(credentialsObject);
                }
            });
        }
        if (typescript_1.default.isObjectLiteralExpression(node) &&
            typescript_1.default.isPropertyDeclaration(node.parent) &&
            node.parent.getChildAt(0).getText() === "description") {
            var hasSubtitle_1 = false;
            node.forEachChild(function (child) {
                if (child.getChildAt(0).getText() === "subtitle") {
                    hasSubtitle_1 = true;
                    if (child.getChildAt(2).getText() !==
                        "'" + constants_1.STANDARD_DESCRIPTIONS.subtitle + "'") {
                        _this.log(lintings_1.LINTINGS.NON_STANDARD_SUBTITLE)(child);
                    }
                }
            });
            if (!hasSubtitle_1) {
                this.log(lintings_1.LINTINGS.SUBTITLE_MISSING_IN_NODE_DESCRIPTION)(node);
            }
        }
        return this.logs;
    };
    NodeDescriptionValidator.lintArea = "nodeDescription";
    return NodeDescriptionValidator;
}());
exports.NodeDescriptionValidator = NodeDescriptionValidator;
