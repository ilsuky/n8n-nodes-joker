"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __read = (this && this.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};
var __spreadArray = (this && this.__spreadArray) || function (to, from) {
    for (var i = 0, il = from.length, j = to.length; i < il; i++, j++)
        to[j] = from[i];
    return to;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Validator = void 0;
var __1 = require("..");
var lintings_1 = require("../lintings");
var services_1 = require("../services");
var utils_1 = require("../utils");
var Collector_1 = require("./Collector");
var ConfigManager_1 = require("./ConfigManager");
var subvalidators = __importStar(require("./subvalidators"));
var Validator = /** @class */ (function () {
    function Validator(testSourceFilePath) {
        this.logs = [];
        this.testSourceFilePath = testSourceFilePath;
    }
    Validator.prototype.setNode = function (node) {
        this.currentNode = node;
        return this;
    };
    Validator.prototype.run = function () {
        var _this = this;
        Object.values(subvalidators).forEach(function (sub) {
            if (ConfigManager_1.ConfigManager.lintAreaIsDisabled(sub.lintArea, __1.masterConfig))
                return;
            _this.runSubValidator(sub);
        });
    };
    Validator.prototype.runSubValidator = function (constructor) {
        var _a;
        var SubValidator = services_1.Logger(constructor);
        var logs = new SubValidator().run(this.currentNode);
        if (logs === null || logs === void 0 ? void 0 : logs.length)
            (_a = this.logs).push.apply(_a, __spreadArray([], __read(logs)));
    };
    /**
     * Run checks _after_ the source file AST has been traversed.
     */
    Validator.prototype.postTraversalChecks = function (sourceFile) {
        var _this = this;
        if (Collector_1.Collector.credentialsTestNames.sort().join('') !==
            Collector_1.Collector.credentialsTestMethods.sort().join()) {
            this.addToLogs(lintings_1.LINTINGS.MISMATCHED_NONOAUTH_CREDENTIALS_TEST_METHOD_REFERENCE, { line: 1, text: "<large excerpt omitted>" });
        }
        if (Collector_1.Collector.tsIgnores.length) {
            Collector_1.Collector.tsIgnores.forEach(function (_a) {
                var line = _a.line, text = _a.text;
                _this.addToLogs(lintings_1.LINTINGS.TS_IGNORE, { line: line, text: text });
            });
        }
        if (Collector_1.Collector.toDos.length) {
            Collector_1.Collector.toDos.forEach(function (_a) {
                var line = _a.line, text = _a.text;
                _this.addToLogs(lintings_1.LINTINGS.TODO, { line: line, text: text });
            });
        }
        var sourceFileHasContinueOnFail = Collector_1.Collector.sourceFileHasContinueOnFail;
        var nodeName = services_1.Traverser.sourceFilePath.split("/").pop();
        if (utils_1.isRegularNode(nodeName) && !sourceFileHasContinueOnFail) {
            var line = Collector_1.Collector.getLineNumber(sourceFile.getChildAt(0));
            line += 1; // TODO: Find out why this offset is needed
            this.addToLogs(lintings_1.LINTINGS.MISSING_CONTINUE_ON_FAIL, {
                line: line,
                text: "<large excerpt omitted>",
            });
        }
    };
    /**
     * Add logs during the final run, i.e. during the post-traversal checks.
     */
    Validator.prototype.addToLogs = function (linting, _a) {
        var _b;
        var line = _a.line, text = _a.text;
        if (ConfigManager_1.ConfigManager.lintIssueIsDisabled(linting.lintIssue, __1.masterConfig) ||
            ConfigManager_1.ConfigManager.logLevelIsDisabled(linting.logLevel, __1.masterConfig) ||
            ConfigManager_1.ConfigManager.lintingIsDisabled(linting, __1.masterConfig) ||
            ConfigManager_1.ConfigManager.lintingIsExcepted(linting, line, Collector_1.Collector.exceptions, __1.masterConfig))
            return;
        this.logs.push(__assign({ message: linting.message, lintAreas: linting.lintAreas, lintIssue: linting.lintIssue, line: line, excerpt: text, sourceFilePath: (_b = this.testSourceFilePath) !== null && _b !== void 0 ? _b : services_1.Traverser.sourceFilePath, logLevel: linting.logLevel }, (linting.details && { details: linting.details })));
    };
    return Validator;
}());
exports.Validator = Validator;
