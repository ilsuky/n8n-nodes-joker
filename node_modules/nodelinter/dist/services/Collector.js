"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __read = (this && this.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};
var __spreadArray = (this && this.__spreadArray) || function (to, from) {
    for (var i = 0, il = from.length, j = to.length; i < il; i++, j++)
        to[j] = from[i];
    return to;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Collector = void 0;
var typescript_1 = __importStar(require("typescript"));
var _1 = require(".");
var constants_1 = require("../constants");
var Navigator_1 = require("./Navigator");
var Collector = /** @class */ (function () {
    function Collector() {
    }
    Collector.run = function (node) {
        Collector.identifyRegularOrTrigger(node);
        Collector.collectComments(node);
        Collector.collectContinueOnFail(node);
        Collector.collectCredentialsTestName(node);
        Collector.collectLoadOptionsMethods(node);
        Collector.collectCredentialsTestMethods(node);
    };
    Object.defineProperty(Collector, "credentialsTestNames", {
        get: function () {
            return __spreadArray([], __read(Collector.credentialsTestNamesSet));
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Collector, "comments", {
        get: function () {
            return Object.values(Object.fromEntries(Collector.commentsMap));
        },
        enumerable: false,
        configurable: true
    });
    Collector.identifyRegularOrTrigger = function (node) {
        if (typescript_1.default.isClassDeclaration(node)) {
            node.forEachChild(function (child) {
                if (typescript_1.default.isIdentifier(child)) {
                    if (child.getText().endsWith("Trigger")) {
                        Collector.isTriggerNode = true;
                    }
                    else {
                        Collector.isRegularNode = true;
                    }
                }
            });
        }
    };
    Collector.collectCredentialsTestName = function (node) {
        if (!_1.Traverser.sourceFilePath.endsWith(".node.ts"))
            return;
        var found = Navigator_1.Navigator.findDescendant(node, { text: "testedBy" });
        if (found) {
            Collector.credentialsTestNamesSet.add(found.parent.getChildAt(2).getText().clean());
        }
    };
    Collector.collectContinueOnFail = function (node) {
        if (_1.Traverser.sourceFilePath.endsWith(".node.ts") &&
            typescript_1.default.isPropertyAccessExpression(node) &&
            node.getChildAt(2).getText() === "continueOnFail") {
            Collector.sourceFileHasContinueOnFail = true;
        }
    };
    Collector.collectLoadOptionsMethods = function (node) {
        if (_1.Traverser.sourceFilePath.endsWith(".node.ts") &&
            typescript_1.default.isIdentifier(node) &&
            node.getText() === "loadOptions") {
            var objectLiteralExpression = node.parent.getChildAt(2);
            objectLiteralExpression.forEachChild(function (method) {
                if (typescript_1.default.isShorthandPropertyAssignment(method)) {
                    Collector.loadOptionsMethods.push(method.getText());
                }
                else {
                    var identifier = method.getChildAt(1);
                    Collector.loadOptionsMethods.push(identifier.getText());
                }
            });
        }
    };
    Collector.collectCredentialsTestMethods = function (node) {
        if (_1.Traverser.sourceFilePath.endsWith(".node.ts") &&
            typescript_1.default.isIdentifier(node) &&
            node.getText() === "credentialTest") {
            var objectLiteralExpression = node.parent.getChildAt(2);
            objectLiteralExpression.forEachChild(function (method) {
                if (typescript_1.default.isShorthandPropertyAssignment(method)) {
                    Collector.credentialsTestMethods.push(method.getText());
                }
                else {
                    var identifier = method.getChildAt(1);
                    Collector.credentialsTestMethods.push(identifier.getText());
                }
            });
        }
    };
    /**
     * Retrieve the ending line number for the node.
     */
    Collector.getLineNumber = function (node) {
        var _a;
        var line = typescript_1.getLineAndCharacterOfPosition(_1.Traverser.sourceFile, (_a = node === null || node === void 0 ? void 0 : node.getEnd()) !== null && _a !== void 0 ? _a : 0 // TODO: Detect undefined node upstream
        ).line;
        return line;
    };
    Collector.collectComments = function (node) {
        var _a;
        var commentRanges = (_a = typescript_1.default.getLeadingCommentRanges(_1.Traverser.sourceFile.getFullText(), node.getFullStart())) !== null && _a !== void 0 ? _a : [];
        var comments = commentRanges.map(function (range) { return ({
            text: _1.Traverser.sourceFile.getFullText().slice(range.pos, range.end),
            line: Collector.getLineNumber(node),
            pos: range.pos,
            end: range.end,
        }); });
        // dedup with map because API may report
        // multiple comment ranges for a single comment
        comments.forEach(function (comment) {
            var key = comment.pos + "-" + comment.end;
            Collector.commentsMap.set(key, comment);
        });
    };
    Object.defineProperty(Collector, "exceptions", {
        // ----------------------------------
        //           getters
        // ----------------------------------
        get: function () {
            return Collector.comments
                .filter(function (comment) { return comment.text.startsWith(constants_1.NEXT_LINE_EXCEPTION_TEXT); })
                .map(function (_a) {
                var line = _a.line, text = _a.text;
                var parts = text.split(" ");
                var lintingsToExcept = [];
                if (parts.length === 2) {
                    lintingsToExcept = ["*"];
                }
                else if (parts.length === 3) {
                    lintingsToExcept = [parts.pop()];
                }
                else if (parts.length > 3) {
                    lintingsToExcept = parts.slice(2);
                }
                return {
                    line: line,
                    lintingsToExcept: lintingsToExcept,
                    exceptionType: "nextLine",
                };
            });
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Collector, "toDos", {
        get: function () {
            return Collector.comments
                .filter(function (comment) { return comment.text.startsWith("// TODO"); })
                .map(function (_a) {
                var line = _a.line, text = _a.text;
                return ({ line: line, text: text });
            });
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Collector, "tsIgnores", {
        get: function () {
            return Collector.comments
                .filter(function (comment) { return comment.text.startsWith("// @ts-ignore"); })
                .map(function (_a) {
                var line = _a.line, text = _a.text;
                return ({ line: line, text: text });
            });
        },
        enumerable: false,
        configurable: true
    });
    Collector.commentsMap = new Map();
    Collector.loadOptionsMethods = [];
    Collector.credentialsTestMethods = [];
    Collector.sourceFileHasContinueOnFail = false;
    Collector.isRegularNode = false;
    Collector.isTriggerNode = false;
    Collector.credentialsTestNamesSet = new Set();
    return Collector;
}());
exports.Collector = Collector;
