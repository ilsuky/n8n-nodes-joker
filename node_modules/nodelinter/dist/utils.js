"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.isRegularNode = exports.getLinting = exports.getLintingName = exports.isLintable = exports.terminate = exports.collect = exports.hasTargetBlank = exports.hasProtocol = exports.hasAnchorLink = exports.isCamelCase = exports.isTitleCase = exports.startsWithCapital = exports.areLongListing = exports.areAlphabetized = void 0;
var fs_1 = __importDefault(require("fs"));
var path_1 = __importDefault(require("path"));
var chalk_1 = __importDefault(require("chalk"));
var title_case_1 = require("title-case");
var constants_1 = require("./constants");
// casing
var areAlphabetized = function (items) {
    return items.join() === items.sort().join();
};
exports.areAlphabetized = areAlphabetized;
var areLongListing = function (items) {
    return items.length >= constants_1.LONG_LISTING_LIMIT;
};
exports.areLongListing = areLongListing;
var startsWithCapital = function (str) {
    return str[0] === str[0].toUpperCase();
};
exports.startsWithCapital = startsWithCapital;
var isTitleCase = function (str) { return str === title_case_1.titleCase(str); };
exports.isTitleCase = isTitleCase;
var isCamelCase = function (str) {
    return /^([a-z]+[A-Z0-9]*)*$/.test(str) || /^[0-9]*$/.test(str);
};
exports.isCamelCase = isCamelCase;
// selector helpers
var hasAnchorLink = function (str) { return /<a href=/.test(str); };
exports.hasAnchorLink = hasAnchorLink;
var hasProtocol = function (str) { return /href="https:\/\//.test(str); };
exports.hasProtocol = hasProtocol;
var hasTargetBlank = function (str) { return /target="_blank"/.test(str); };
exports.hasTargetBlank = hasTargetBlank;
/**
 * Traverse a dir recursively and collect file paths that pass a test.
 */
var collect = function (dir, test, collection) {
    if (collection === void 0) { collection = []; }
    fs_1.default.readdirSync(dir).forEach(function (i) {
        var iPath = path_1.default.join(dir, i);
        if (fs_1.default.lstatSync(iPath).isDirectory()) {
            exports.collect(iPath, test, collection);
        }
        if (test(i))
            collection.push(iPath);
    });
    return collection;
};
exports.collect = collect;
// TODO: stderr instead of stdout
function terminate(error) {
    console.log([
        chalk_1.default.red.inverse("error".padStart(7, " ").padEnd(9, " ").toUpperCase()),
        "" + chalk_1.default.bold(error.title + ":"),
        error.message,
        "\n",
    ].join(" "));
    process.exit(0);
}
exports.terminate = terminate;
var isLintable = function (target) {
    return constants_1.LINTABLE_FILE_PATTERNS.some(function (pattern) { return target.endsWith(pattern); });
};
exports.isLintable = isLintable;
// disabled state
// TODO: Refactor
var getLintingName = function (targetLinting, config) {
    return Object.entries(config.lintings).find(function (configLinting) { return targetLinting.message === configLinting[1].message; })[0];
};
exports.getLintingName = getLintingName;
// TODO: Inefficient retrieval of linting name from linting message
var getLinting = function (targetLinting, configLintings) {
    return Object.values(configLintings).find(function (configLinting) {
        return configLinting.message === targetLinting.message;
    });
};
exports.getLinting = getLinting;
var isRegularNode = function (nodeName) {
    return (nodeName === null || nodeName === void 0 ? void 0 : nodeName.endsWith(".node.ts")) && !(nodeName === null || nodeName === void 0 ? void 0 : nodeName.endsWith("Trigger.node.ts"));
};
exports.isRegularNode = isRegularNode;
